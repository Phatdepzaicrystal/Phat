local HttpService = game:GetService("HttpService")
local device_id = gethwid and gethwid() or "Unknown"

-- C·∫•u h√¨nh GitHub
local GITHUB_TOKEN = "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"  -- Thay b·∫±ng token c·ªßa b·∫°n
local REPO_OWNER = "Phatdepzaicrystal"
local REPO_NAME = "Key"
local FILE_PATH = "keys.json"
local RAW_URL = "https://raw.githubusercontent.com/" .. REPO_OWNER .. "/" .. REPO_NAME .. "/refs/heads/main/" .. FILE_PATH
local API_URL = "https://api.github.com/repos/" .. REPO_OWNER .. "/" .. REPO_NAME .. "/contents/" .. FILE_PATH

-- H√†m t·∫£i keys.json t·ª´ GitHub
local function getKeys()
    local success, response = pcall(function()
        return HttpService:GetAsync(RAW_URL)
    end)
    if success then
        return HttpService:JSONDecode(response)
    else
        error("L·ªói t·∫£i keys.json t·ª´ GitHub!")
    end
end

-- H√†m l·∫•y SHA c·ªßa file keys.json (c·∫ßn cho vi·ªác update file)
local function getSHA()
    local headers = { ["Authorization"] = "token " .. GITHUB_TOKEN }
    local success, response = pcall(function()
        return HttpService:GetAsync(API_URL, true)
    end)
    if success then
        local data = HttpService:JSONDecode(response)
        return data.sha
    else
        return nil
    end
end

-- H√†m c·∫≠p nh·∫≠t keys.json tr√™n GitHub v·ªõi n·ªôi dung m·ªõi
local function updateKeysOnGitHub(updatedKeys, sha)
    local jsonContent = HttpService:JSONEncode(updatedKeys)
    -- S·ª≠ d·ª•ng h√†m Base64 c·ªßa Synapse X n·∫øu c√≥, n·∫øu kh√¥ng b·∫°n c·∫ßn thay th·∫ø
    local base64Content = (syn and syn.crypt.base64.encode or HttpService.Base64Encode)(jsonContent)
    local payload = {
         message = "üîê Update keys.json: th√™m HWID",
         content = base64Content,
         sha = sha or nil
    }
    local headers = {
         ["Authorization"] = "token " .. GITHUB_TOKEN,
         ["Content-Type"] = "application/json"
    }
    local success, result = pcall(function()
         return HttpService:RequestAsync{
             Url = API_URL,
             Method = "PUT",
             Headers = headers,
             Body = HttpService:JSONEncode(payload)
         }
    end)
    if success then
         print("‚úÖ Update keys.json th√†nh c√¥ng!")
    else
         warn("‚ùå Update keys.json th·∫•t b·∫°i:", result)
    end
end

-- H√†m t·ª± ƒë·ªông ch·ªçn key h·ª£p l·ªá
local function autoSelectKey(keysTable)
    -- ·ªû ƒë√¢y, ta ch·ªçn key ƒë·∫ßu ti√™n c√≥ userId kh√°c nil (t·ª©c ƒë√£ ƒë∆∞·ª£c g√°n) ho·∫∑c key ƒë·∫ßu ti√™n n·∫øu ch∆∞a ƒë∆∞·ª£c g√°n
    for _, entry in ipairs(keysTable) do
         if entry.userId then
              return entry.code, true  -- true: ƒë√£ c√≥ HWID
         end
    end
    -- N·∫øu kh√¥ng t√¨m th·∫•y key n√†o c√≥ userId, ch·ªçn key ƒë·∫ßu ti√™n (c√≥ th·ªÉ l√† key tr·ªëng)
    if #keysTable > 0 then
         return keysTable[1].code, false
    end
    return nil, false
end

-- H√†m ki·ªÉm tra v√† c·∫≠p nh·∫≠t HWID cho key n·∫øu ch∆∞a c√≥
local function checkAndAddHWID(user_key)
    local keysTable = getKeys()
    local keyFound = false
    local hwidPresent = false
    for i, entry in ipairs(keysTable) do
         if entry.code == user_key then
              keyFound = true
              if not entry.hwid then
                   entry.hwid = device_id
                   hwidPresent = false
                   print("‚úÖ HWID ƒë∆∞·ª£c th√™m v√†o key:", user_key)
              else
                   hwidPresent = (entry.hwid == device_id)
                   if not hwidPresent then
                        print("‚ùå HWID kh√¥ng kh·ªõp! ƒê√£ l∆∞u HWID:", entry.hwid, "m√† m√°y c·ªßa b·∫°n l√†:", device_id)
              end
              break
         end
    end
    if not keyFound then
         print("‚ùå Key kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!")
         return false
    end
    -- C·∫≠p nh·∫≠t file tr√™n GitHub n·∫øu HWID ch∆∞a c√≥ (ho·∫∑c kh√¥ng kh·ªõp, b·∫°n c√≥ th·ªÉ quy·∫øt ƒë·ªãnh kh√¥ng update n·∫øu kh√¥ng kh·ªõp)
    if not hwidPresent then
         local sha = getSHA()
         updateKeysOnGitHub(keysTable, sha)
         -- Sau khi update, n·∫øu HWID kh√¥ng kh·ªõp th√¨ d·ª´ng
         if not hwidPresent then
              return false
         end
    end
    return hwidPresent
end

-- T·ª± ƒë·ªông ch·ªçn key (theo logic b·∫°n mong mu·ªën)
local user_key, alreadyHasHWID = autoSelectKey(getKeys())
if not user_key then
    print("‚ùå Kh√¥ng t√¨m th·∫•y key h·ª£p l·ªá!")
    return
end

-- Ki·ªÉm tra v√† c·∫≠p nh·∫≠t HWID n·∫øu c·∫ßn
local valid = checkAndAddHWID(user_key)

if valid then
    print("‚úÖ ƒêi·ªÅu ki·ªán key & HWID tho·∫£ m√£n!")
    getgenv().Language = "English"
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Dex-Bear/Vxezehub/refs/heads/main/VxezeHubMain2"))()
else
    print("‚ùå Key ho·∫∑c HWID kh√¥ng h·ª£p l·ªá, kh√¥ng ch·∫°y script.")
    game.Players.LocalPlayer:Kick("Key ho·∫∑c HWID kh√¥ng h·ª£p l·ªá!")
end
