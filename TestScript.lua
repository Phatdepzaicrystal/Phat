repeat wait() until game:IsLoaded() and game.Players.LocalPlayer

if not getgenv().Key or getgenv().Key == "" then
    game.Players.LocalPlayer:Kick("‚ö†Ô∏è B·∫°n ch∆∞a nh·∫≠p key!")
    return
end

-- üîó URL ch·ª©a danh s√°ch Key & HWID
local keysURL = "https://raw.githubusercontent.com/Phatdepzaicrystal/Key/refs/heads/main/keys.json"
local hwidURL = "https://raw.githubusercontent.com/Phatdepzaicrystal/Key/refs/heads/main/hwid.json"

local keyValid = false
local hwidValid = false
local hwidRegistered = false

-- üöÄ L·∫•y HWID c·ªßa thi·∫øt b·ªã
local function getHWID()
    return game:GetService("RbxAnalyticsService"):GetClientId()
end

local HWID = gethwid and gethwid() or "Unknown"

-- üìå Ki·ªÉm tra Key
local function checkKey()
    local success, response = pcall(function()
        return game:HttpGet(keysURL)
    end)

    if not success then
        game.Players.LocalPlayer:Kick("üö´ Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß ki·ªÉm tra key!")
        return
    end

    local HttpService = game:GetService("HttpService")
    local keysData = HttpService:JSONDecode(response)

    if keysData[getgenv().Key] and keysData[getgenv().Key] > os.time() then
        keyValid = true
    end
end

-- üìå Ki·ªÉm tra HWID ƒë√£ g·∫Øn v·ªõi Key ch∆∞a
local function checkHWID()
    local success, response = pcall(function()
        return game:HttpGet(hwidURL)
    end)

    if not success then
        game.Players.LocalPlayer:Kick("üö´ Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß ki·ªÉm tra HWID!")
        return
    end

    local HttpService = game:GetService("HttpService")
    local hwidData = HttpService:JSONDecode(response)

    if hwidData[getgenv().Key] and hwidData[getgenv().Key] == HWID then
        hwidValid = true
    elseif hwidData[getgenv().Key] == nil then
        hwidRegistered = false
    end
end

-- üîÑ C·∫≠p nh·∫≠t HWID n·∫øu ch∆∞a c√≥
local function updateHWID()
    local updateURL = "https://api.github.com/repos/Phatdepzaicrystal/Key/contents/hwid.json"
    local requestBody = {
        message = "G√°n HWID v·ªõi Key",
        content = game:GetService("HttpService"):JSONEncode({[getgenv().Key] = HWID}),
        sha = nil  -- L·∫•y SHA t·ª´ GitHub tr∆∞·ªõc khi c·∫≠p nh·∫≠t (c·∫ßn th√™m API Token n·∫øu d√πng API n√†y)
    }

    local rq = http_request or request or syn and syn.request
    if rq then
        local res = rq({
            Url = updateURL,
            Method = "PUT",
            Headers = {
                ["Authorization"] = "token YOUR_GITHUB_API_TOKEN",
                ["Content-Type"] = "application/json"
            },
            Body = game:GetService("HttpService"):JSONEncode(requestBody)
        })

        if res and res.StatusCode == 200 then
            hwidRegistered = true
        end
    else
        game.Players.LocalPlayer:Kick("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t HWID! H√£y li√™n h·ªá h·ªó tr·ª£.")
    end
end

-- üìå Ti·∫øn h√†nh ki·ªÉm tra Key & HWID
checkKey()
checkHWID()

if not keyValid then
    game.Players.LocalPlayer:Kick("‚ùå Key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!")
    return
end

if not hwidValid then
    if hwidRegistered then
        game.Players.LocalPlayer:Kick("‚ùå HWID kh√¥ng h·ª£p l·ªá! H√£y reset HWID.")
    else
        updateHWID()
        if hwidRegistered then
            print("‚úÖ HWID ƒë√£ ƒë∆∞·ª£c g√°n v·ªõi Key! ƒêang t·∫£i script...")
        else
            game.Players.LocalPlayer:Kick("‚ùå Kh√¥ng th·ªÉ g√°n HWID! H√£y li√™n h·ªá h·ªó tr·ª£.")
        end
    end
    return
end

print("‚úÖ Key & HWID h·ª£p l·ªá! ƒêang t·∫£i script...")
