-- üöÄ L·∫•y HWID c·ªßa thi·∫øt b·ªã
local function getHWID()
    return game:GetService("RbxAnalyticsService"):GetClientId()
end

local HWID = getHWID()
local API_BASE = "https://90b5e3ad-055e-4b22-851d-bd511d979dbc-00-3591ow60fhoft.riker.replit.dev"
local API_CHECK_HWID = API_BASE .. "/check_hwid?hwid=%s"
local API_UPDATE_HWID = API_BASE .. "/update_hwid?hwid=%s"

-- üìå G·ª≠i y√™u c·∫ßu ki·ªÉm tra HWID
local function checkHWID()
    local url = string.format(API_CHECK_HWID, HWID)
    local success, response = pcall(function()
        return game:HttpGet(url)
    end)

    if not success then
        game.Players.LocalPlayer:Kick("üö´ Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß ki·ªÉm tra HWID!")
        return false
    end

    local HttpService = game:GetService("HttpService")
    local data = HttpService:JSONDecode(response)

    if data.status == "valid" then
        return true
    elseif data.status == "not_registered" then
        return "register"
    else
        return false
    end
end

-- üìå G·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t HWID
local function updateHWID()
    local url = string.format(API_UPDATE_HWID, HWID)
    local success, response = pcall(function()
        return game:HttpGet(url)
    end)

    if success and response then
        local HttpService = game:GetService("HttpService")
        local data = HttpService:JSONDecode(response)
        return data.status == "success"
    end

    return false
end

-- üìå Ki·ªÉm tra & c·∫≠p nh·∫≠t HWID n·∫øu ch∆∞a c√≥
local result = checkHWID()

if result == true then
    print("‚úÖ HWID h·ª£p l·ªá! Ti·∫øp t·ª•c...")
elseif result == "register" then
    local registered = updateHWID()
    if registered then
        print("‚úÖ HWID ƒë√£ ƒë∆∞·ª£c g√°n th√†nh c√¥ng!")
    else
        game.Players.LocalPlayer:Kick("‚ùå Kh√¥ng th·ªÉ g√°n HWID! H√£y li√™n h·ªá h·ªó tr·ª£.")
    end
else
    game.Players.LocalPlayer:Kick("‚ùå HWID kh√¥ng h·ª£p l·ªá! H√£y reset HWID.")
end
